<?php

// fetch Index Fungorum RDF

/*

Index Fungorum: Identifier Allocations
<100001 – used for all entries in the Dictionary of the Fungi but ‘adopted’ for supraspecific names in Index Fungorum
100001 – 489999 – Index Fungorum
490000 – 499999 – MycoBank (used for missing names)
500000 – 520000 – MycoBank (used for registration)
520001 – 549999 – Index Fungorum (used for unregistered names and missing names)
550000 – 559999 – Index Fungorum (used for on-line registration)
560000 – 566348 – MycoBank (used for registration and missing names)
566349 – 569999 – Index Fungorum (used for missing names)
570000 – 579999 – Chinese portal (used for registration)
580000 – 589999 – Index Fungorum (used for missing names)
590000 – 599999 – Index Fungorum (used for manual addition of typifications)
600000 – 699999 – Index Fungorum (used for missing names)
700000 – 799999 – Index Fungorum (used for infrageneric names)
800000 – 899999 – MycoBank (used for registration and missing names)

*/

$config['proxy_name'] = 'wwwcache.gla.ac.uk';
$config['proxy_port'] = 8080;

$config['proxy_name'] = '';
$config['proxy_port'] = '';


//--------------------------------------------------------------------------------------------------
/**
 * @brief Test whether HTTP code is valid
 *
 * HTTP codes 200 and 302 are OK.
 *
 * For JSTOR we also accept 403
 *
 * @param HTTP code
 *
 * @result True if HTTP code is valid
 */
function HttpCodeValid($http_code)
{
	if ( ($http_code == '200') || ($http_code == '302') || ($http_code == '403'))
	{
		return true;
	}
	else{
		return false;
	}
}


//--------------------------------------------------------------------------------------------------
/**
 * @brief GET a resource
 *
 * Make the HTTP GET call to retrieve the record pointed to by the URL. 
 *
 * @param url URL of resource
 *
 * @result Contents of resource
 */
function get($url, $userAgent = '', $timeout = 0)
{
	global $config;
	
	$data = '';
	
	$ch = curl_init(); 
	curl_setopt ($ch, CURLOPT_URL, $url); 
	curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); 
	curl_setopt ($ch, CURLOPT_FOLLOWLOCATION,	1); 
	//curl_setopt ($ch, CURLOPT_HEADER,		  1);  

	curl_setopt ($ch, CURLOPT_COOKIEJAR, 'cookie.txt');
	
	if ($userAgent != '')
	{
		curl_setopt($ch, CURLOPT_USERAGENT, $userAgent);
	}	
	
	if ($timeout != 0)
	{
		curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
	}
	
	if ($config['proxy_name'] != '')
	{
		curl_setopt ($ch, CURLOPT_PROXY, $config['proxy_name'] . ':' . $config['proxy_port']);
	}
	
			
	$curl_result = curl_exec ($ch); 
	
	//echo $curl_result;
	
	if (curl_errno ($ch) != 0 )
	{
		echo "CURL error: ", curl_errno ($ch), " ", curl_error($ch);
		exit();
	}
	else
	{
		$info = curl_getinfo($ch);
		
		 //$header = substr($curl_result, 0, $info['header_size']);
		//echo $header;
		
		
		$http_code = $info['http_code'];
		
		//echo "<p><b>HTTP code=$http_code</b></p>";
		
		if (HttpCodeValid ($http_code))
		{
			$data = $curl_result;
		}
	}
	return $data;
}


$start = 489999;
$stop  = 501000;

$start = 501000;
$stop  = 510000;

$start = 510000;
$start = 521634;
$stop  = 550000;

$start = 550000;
$start = 567134;
$stop  = 570000;

$start = 570000;
$start = 622560;
$stop  = 630000;

$start = 800000;
$stop  = 814000;


$basedir = 'rdf';

$count = 0;

$ids = array(807390,
807391,
587234,
800249,
800887,
800888,
800889,
800890,
800891,
800892,
801546,
801547,
801548,
801549,
801550,
801902,
803212,
804876,
804877,
804929,
808651,
812670,
805271,
505909,
519045,
519046,
519169,
519170,
519171,
519172,
550065,
550752,
550762,
550763,
550799,
550884,
550885,
550887,
550888,
550889,
550890,
550891,
550892,
550893,
550894,
550895,
550896,
550898,
550899,
550900,
550904,
550905,
550906,
550907,
550910,
550911,
550912,
550913,
550914,
550915,
550917,
550918,
550919,
550920,
550921,
550922,
550924,
550925,
550926,
550927,
550928,
550929,
550930,
550931,
550932,
550933,
550934,
550935,
550936,
550937,
550939,
550940,
550941,
550942,
550943,
550944,
550945,
550958,
550996,
550997,
550998,
550999,
551000,
551004,
551005,
551011,
551012,
551014,
551015,
551016,
551017,
551049,
551051,
551052,
551053,
551054,
551057,
551058,
551059,
551060,
551063,
551065,
551072,
551073,
551074,
551131,
551132,
551133,
551134,
551156,
551177,
551181,
551182,
551202,
551212,
551223,
551232,
551233,
551234,
551235,
551236,
551237,
551238,
551239,
551240,
551241,
551242,
551243,
551244,
551245,
551246,
551247,
551248,
551249,
551250,
551252,
551253,
551254,
551255,
551256,
551257,
551258,
551259,
551260,
551261,
551262,
551263,
551264,
551265,
551266,
551267,
551268,
551269,
551270,
551271,
551272,
551273,
551274,
551275,
551276,
551277,
551278,
551279,
551280,
551281,
551282,
551283,
551284,
551286,
551298,
551299,
551304,
551307,
551308,
551309,
551310,
551315,
551316,
551322,
551323,
551324,
551325,
551326,
551327,
551328,
551331,
551334,
551335,
551342,
551344,
551345,
551346,
551347,
551348,
551349,
551366,
551367,
551368,
551375,
551376,
551377,
551378,
551379,
551380,
551381,
551383,
551384,
551389,
551390,
551391,
551392,
551393,
551394,
551395,
551396,
551397,
551400,
551401,
551404,
551405,
551408,
551409,
551410,
551411,
551412,
551414,
551415,
551416,
551417,
551418,
551419,
551422,
551428,
551429,
551431,
551432,
551433,
551434,
551435,
551436,
551437,
551438,
551439,
551441,
551442,
551445,
551448,
551449,
551450,
551478,
551479,
551480,
551481,
551484,
551485,
551486,
551487,
551488,
551489,
551490,
551491,
551492,
551493,
551494,
551495,
551496,
551497,
551498,
551499,
551500,
551501,
551502,
551527,
551528,
551529,
551530,
551531,
551532,
551533,
551534,
551535,
551536,
551540,
551541,
551550,
551555,
551569,
551576,
551603,
551604,
551605,
551606,
551607,
551608,
551609,
551610,
551614,
551619,
551620,
551628,
551651,
551652,
551675,
551676,
551677,
551679,
551680,
551681,
551701,
551702,
551703,
551704,
551705,
551706,
551707,
551708,
551709,
551712,
551713,
551714,
551715,
551727,
551728,
551729,
551744,
551745,
551751,
551752,
551753,
551754,
551761,
551762,
551763,
551764,
551765,
551767,
551768,
551769,
551770,
551771,
551772,
551773,
551774,
551775,
551776,
551777,
551780,
551781,
551782,
551784,
551785,
551786,
551787,
551788,
551791,
551792,
551793,
551794,
551795,
551796,
551797,
551799,
551800,
551801,
551803,
551804,
551806,
551809,
551814,
551858,
551867,
551868,
551895,
551896,
551897,
551899,
551900,
551915,
551916,
551918,
551927,
551928,
551944,
551945,
551947,
551948,
551949,
551964,
551965,
551966,
551967,
551968,
551969,
551970,
551971,
551972,
551973,
551975,
551976,
551977,
551979,
551980,
551981,
551982,
551992,
551993,
552005,
552006,
552008,
552012,
552013,
552014,
552015,
552016,
552017,
552018,
552019,
552020,
552021,
552022,
552023,
552024,
552025,
552026,
552027,
552029,
552030,
552031,
552032,
552033,
552034,
552035,
552036,
552037,
552038,
552039,
552040,
552041,
552042,
552043,
552044,
563611,
563622,
563623,
563624,
563625,
563627,
564880,
565713,
584108,
622137,
622140,
623003,
800195,
800197,
800198,
800199,
800200,
800201,
800202,
800203,
800204,
800205,
800206,
800207,
800208,
800209,
800210,
800211,
800212,
800936,
800953,
802893,
802899,
802900,
802901,
803666,
803668,
803669,
804045,
804047,
804048,
804050,
804054,
804063,
804064,
804065,
804066,
804067,
804069,
804070,
804071,
804073,
804074,
804075,
804083,
804087,
804108,
804109,
804112,
804113,
804114,
804115,
804117,
804118,
804120,
804121,
804122,
804123,
804125,
804126,
804127,
804128,
804129,
804130,
804131,
804132,
804133,
804134,
804136,
804902,
804961,
805103,
805104,
805105,
805107,
806046,
807886,
807887,
807888,
807889,
807890,
807891,
807913,
807914,
807915,
807916,
807917,
807918,
807921,
807922,
807923,
808066,
808073,
808103,
808104,
808105,
808106,
808107,
808108,
808109,
808110,
808114,
808115,
808116,
808118,
808119,
808121,
808123,
808124,
808125,
808126,
808127,
808128,
808129,
809515,
809516,
809517,
809518,
809519,
809520,
809521,
809524,
809525,
809526,
809527,
809687,
810350,
810351,
810352,
810354,
810355,
810356,
810361,
810362,
810363,
810364,
810365,
810366,
810367,
810368,
810670,
810671,
811101,
811222,
811223,
811420,
811421,
811445,
811668,
811669,
811670,
811671,
811672,
811673,
811675,
811676,
811677,
811678,
811679,
811900,
811901,
811902,
811903,
811904,
811905,
811906,
811907,
811959,
812048,
812143,
812144,
812145,
812146,
812147,
812148,
812149,
812150,
812151,
812152,
812153,
812154,
812155,
812156,
812157,
812158,
812159,
812160,
812161,
812162,
812163,
812413,
812414,
812415,
812482,
812643,
812644,
812646,
812649,
812650,
812651,
812652,
812653,
812654,
812655,
812656,
812657,
812658,
812659,
812660,
812661,
812662,
812663,
812664,
812665,
812666,
812667,
812672,
812873,
812936,
812937,
813043,
813044,
813239,
813240,
813241,
813242,
813805,
813990,
813992,
813994,
807731,
807732,
807749,
807750,
807751,
807752,
807753,
807754,
807755,
807756,
807757,
519623,
519624,
803444,
804028,
804218,
804327,
805173,
805905,
806045,
807071,
807138,
807657,
809601,
809602,
810546,
810547,
810753,
811646,
551135,
551136,
551137,
551138,
551139,
551140,
807537,
805781,
803883,
804808,
806058,
807929,
808255,
808256,
808257,
808258,
808259,
808260,
808261,
808264,
808266,
808844,
808845,
808846,
808847,
808848,
808849,
809860,
809861,
810025,
810133,
810692,
810693,
808048,
807056,
804770,
807368,
807369,
807370,
807371,
807372,
807373,
807374,
800929,
800686);

//for ($id = $start; $id <= $stop; $id++)
foreach ($ids as $id)
{
	echo $id . "\n";
	
	
	$url = 'http://www.indexfungorum.org/IXFWebService/Fungus.asmx/NameByKeyRDF?NameLsid=urn:lsid:indexfungorum.org:names:' . $id;
	
	$xml = get($url);
	
	if ($xml != '')
	{

			
		$dir = floor($id / 1000);
		
		$dir = dirname(__FILE__) . "/$basedir/" . $dir;
		if (!file_exists($dir))
		{
			$oldumask = umask(0); 
			mkdir($dir, 0777);
			umask($oldumask);
		}
		
		$f = $dir . '/' . $id . '.xml';
		$file = fopen($f, "w");
		fwrite($file, $xml);
		fclose($file);
	}
	
	if (($count++ % 10) == 0)
	{
		$rand = rand(2000000, 6000000);
    	echo '...sleeping for ' . round(($rand / 1000000),2) . ' seconds' . "\n";
    	usleep($rand);
    }
}



?>